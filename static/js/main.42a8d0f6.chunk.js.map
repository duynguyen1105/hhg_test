{"version":3,"sources":["components/Counter.tsx","utils/apiCaller.ts","constants/Config.ts","components/common/ConfirmDialog.tsx","components/common/Loading.tsx","components/common/Notification.tsx","components/FormDialog.tsx","components/common/TablePaginationActions.tsx","components/EmployeeTable.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","useState","count","setCount","Container","style","textAlign","Typography","variant","color","ButtonGroup","Button","onClick","x","apiCaller","endpoint","method","body","a","axios","data","res","console","error","useStyles","makeStyles","theme","dialog","padding","spacing","position","top","dialogTitle","dialogContent","dialogAction","justifyContent","titleIcon","palette","secondary","main","cursor","fontSize","ConfirmDialog","props","confirmDialog","setConfirmDialog","classes","Dialog","open","isOpen","paper","DialogTitle","className","IconButton","disabled","DialogContent","title","subTitle","DialogActions","onConfirm","Loading","Box","left","bottom","right","display","alignItems","CircularProgress","root","Notification","notify","setNotify","handleClose","event","reason","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","severity","type","message","schema","yup","shape","firstname","required","max","lastname","email","FormDialog","typeAction","handleAddItem","handleEditItem","id","initialData","dataEmployee","setDataEmployee","loading","setLoading","useEffect","fetchData","setValue","useForm","resolver","yupResolver","handleSubmit","control","errors","formState","clearErrors","onSave","handleOnClose","onSubmit","Grid","container","item","xs","render","field","value","onChange","ref","TextField","inputRef","fullWidth","label","helperText","name","width","table","minWidth","TablePaginationActions","useTheme","page","rowsPerPage","onPageChange","direction","Math","ceil","StyledTableCell","withStyles","createStyles","head","backgroundColor","common","white","TableCell","StyledTableRow","action","hover","TableRow","EmployeeTable","employeeData","setEmployeeData","setPage","setRowsPerPage","openFormDialog","setOpenFormDialog","typeFormDialog","setTypeFormDialog","idEmployee","setIdEmployee","reverse","handleDeleteEmployee","handleShowFormDialog","align","TableContainer","component","Paper","Table","stickyHeader","size","TableHead","TableBody","slice","map","employee","EditOutlined","DeleteForeverOutlined","background","TablePagination","rowsPerPageOptions","length","newPage","onRowsPerPageChange","parseInt","target","ActionsComponent","TabPanel","children","index","other","role","hidden","MainPage","React","AppBar","Toolbar","flexGrow","Tabs","newValue","Tab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42a8d0f6.chunk.js","sourcesContent":["import { Button, ButtonGroup, Container, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  const handleIncrease = () => {\n    setCount((x) => x + 1);\n  };\n  const handleReset = () => {\n    setCount(0);\n  };\n  return (\n    <Container style={{ textAlign: \"center\" }}>\n      <br />\n      <Typography variant=\"h3\" style={{ color: \"#4d7cc1\" }}>\n        Counter: {count}\n      </Typography>\n      <br />\n      <ButtonGroup>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleIncrease}>\n          Increase\n        </Button>\n        <Button variant=\"outlined\" color=\"secondary\" onClick={handleReset}>\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Container>\n  );\n};\n\nexport default Counter;\n","import * as Config from \"../constants/Config\";\nimport axios from \"axios\";\n\n\nconst apiCaller = async (endpoint: string, method: any, body?: any) => {\n  try {\n    const res = await axios(`${Config.API_URL}/${endpoint}`, {\n        method: method,\n        data: body\n    });\n    return res;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport default apiCaller;\n","export const API_URL:string = 'https://60f79f139cdca00017454f06.mockapi.io/api/Employees' ;","import {\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialog: {\n    padding: theme.spacing(2),\n    position: \"absolute\",\n    top: theme.spacing(10),\n  },\n  dialogTitle: {\n    textAlign: \"center\",\n  },\n  dialogContent: {\n    textAlign: \"center\",\n  },\n  dialogAction: {\n    justifyContent: \"center\",\n  },\n  titleIcon: {\n    color: theme.palette.secondary.main,\n    \"&:hover\": {\n      cursor: \"default\",\n    },\n    \"& .MuiSvgIcon-root\": {\n      fontSize: \"8rem\",\n    },\n  },\n}));\n\nexport default function ConfirmDialog(props: any) {\n  const { confirmDialog, setConfirmDialog } = props;\n  const classes = useStyles();\n\n  return (\n    <Dialog open={confirmDialog.isOpen} classes={{ paper: classes.dialog }}>\n      <DialogTitle className={classes.dialogTitle}>\n        <IconButton disabled className={classes.titleIcon}>\n          <WarningIcon className={classes.titleIcon} />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Typography variant=\"h6\">{confirmDialog.title}</Typography>\n        <Typography variant=\"subtitle2\">{confirmDialog.subTitle}</Typography>\n      </DialogContent>\n      <DialogActions className={classes.dialogAction}>\n        <ButtonGroup>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={confirmDialog.onConfirm}\n          >\n            Yes\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() =>\n              setConfirmDialog({ ...confirmDialog, isOpen: false })\n            }\n          >\n            No\n          </Button>\n        </ButtonGroup>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\n\nconst Loading = () => (\n  <Box\n    top={0}\n    left={0}\n    bottom={0}\n    right={0}\n    position=\"absolute\"\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    <CircularProgress />\n  </Box>\n);\n\nexport default Loading;\n","import React from \"react\";\nimport { Snackbar, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    top: theme.spacing(9),\n  },\n}));\n\nexport default function Notification(props: any) {\n  const { notify, setNotify } = props;\n  const classes = useStyles();\n\n  const handleClose = (event: any, reason: any): any => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setNotify({\n      ...notify,\n      isOpen: false,\n    });\n  };\n\n  return (\n    <Snackbar\n      className={classes.root}\n      open={notify.isOpen}\n      autoHideDuration={2000}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      onClose={handleClose}\n    >\n      <Alert severity={notify.type} onClose={() => handleClose}>\n        {notify.message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import { ButtonGroup, Grid, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport apiCaller from \"../utils/apiCaller\";\nimport Loading from \"./common/Loading\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\ntype EmployeeValue = {\n  firstname: string;\n  lastname: string;\n  email: string;\n  position: string;\n};\n\nconst schema = yup.object().shape({\n  firstname: yup\n    .string()\n    .required(\"First Name is required\")\n    .max(32, \"First Name must be less than 20 characters\"),\n  lastname: yup\n    .string()\n    .required(\"Last Name is required\")\n    .max(32, \"Last Name must be less than 20 characters\"),\n  email: yup\n    .string()\n    .required(\"Email is required\")\n    .email(\"Please enter a valid email\"),\n  position: yup.string().required(\"Position is required\"),\n});\n\nexport default function FormDialog(props: any) {\n  const {\n    typeAction,\n    open,\n    handleClose,\n    handleAddItem,\n    handleEditItem,\n    id = \"\",\n  } = props;\n\n  const initialData = {\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    position: \"\",\n  };\n\n  const [dataEmployee, setDataEmployee] = useState<EmployeeValue>(initialData);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchData();\n  }, [id]);\n\n  useEffect(() => {\n    if (dataEmployee) {\n      setValue(\"firstname\", dataEmployee.firstname);\n      setValue(\"lastname\", dataEmployee.lastname);\n      setValue(\"email\", dataEmployee.email);\n      setValue(\"position\", dataEmployee.position);\n    }\n  }, [dataEmployee]);\n\n  const {\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n    clearErrors,\n  } = useForm<EmployeeValue>({ resolver: yupResolver(schema) });\n\n  const fetchData = async () => {\n    setDataEmployee(initialData);\n    if (typeAction === \"edit\") {\n      setLoading(true);\n      const data = await apiCaller(`/${id}`, \"get\", null);\n      setDataEmployee(data?.data);\n      setLoading(false);\n    }\n  };\n\n  const onSave = async (data: any) => {\n    handleClose();\n    typeAction === \"add\"\n      ? await handleAddItem(data)\n      : await handleEditItem(data, id);\n    setDataEmployee(initialData);\n    fetchData();\n  };\n\n  const handleOnClose = () => {\n    clearErrors([\"firstname\", \"lastname\", \"email\", \"position\"]);\n    handleClose();\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleOnClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <form onSubmit={handleSubmit((data) => onSave(data))}>\n        <DialogTitle id=\"form-dialog-title\">\n          <Typography variant=\"h5\" style={{ color: \"#4d7cc1\" }}>\n            {typeAction === \"add\" ? \"Add new employee\" : \"Edit employee\"}\n          </Typography>\n        </DialogTitle>\n        <DialogContent>\n          {loading && <Loading />}\n\n          <Grid container alignItems=\"flex-start\" spacing={2}>\n            <Grid item xs={12}>\n              <Controller\n                render={({ field: { value, onChange, ref } }) => (\n                  <TextField\n                    value={value}\n                    onChange={onChange}\n                    inputRef={ref}\n                    fullWidth\n                    label=\"First Name *\"\n                    error={errors.firstname ? true : false}\n                    helperText={errors.firstname?.message}\n                  />\n                )}\n                name=\"firstname\"\n                control={control}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                render={({ field: { value, onChange, ref } }) => (\n                  <TextField\n                    value={value}\n                    onChange={onChange}\n                    inputRef={ref}\n                    fullWidth\n                    label=\"Last Name *\"\n                    error={errors.lastname ? true : false}\n                    helperText={errors.lastname?.message}\n                  />\n                )}\n                name=\"lastname\"\n                control={control}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                render={({ field: { value, onChange, ref } }) => (\n                  <TextField\n                    value={value}\n                    onChange={onChange}\n                    inputRef={ref}\n                    fullWidth\n                    label=\"Email *\"\n                    error={errors.email ? true : false}\n                    helperText={errors.email?.message}\n                  />\n                )}\n                name=\"email\"\n                control={control}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                render={({ field: { value, onChange, ref } }) => (\n                  <TextField\n                    value={value}\n                    onChange={onChange}\n                    inputRef={ref}\n                    fullWidth\n                    label=\"Position *\"\n                    error={errors.position ? true : false}\n                    helperText={errors.position?.message}\n                  />\n                )}\n                name=\"position\"\n                control={control}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <ButtonGroup>\n            <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleOnClose}\n            >\n              Cancel\n            </Button>\n          </ButtonGroup>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n}\n","import IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport React from \"react\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, 0);\n  };\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page - 1);\n  };\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page + 1);\n  };\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nexport default TablePaginationActions;\n","import { Button, ButtonGroup, Container, Typography } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { createStyles, Theme, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { DeleteForeverOutlined, EditOutlined } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport apiCaller from \"../utils/apiCaller\";\nimport ConfirmDialog from \"./common/ConfirmDialog\";\nimport Loading from \"./common/Loading\";\nimport Notification from \"./common/Notification\";\nimport FormDialog from \"./FormDialog\";\nimport TablePaginationActions from \"./common/TablePaginationActions\";\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: \"#4f9ed5\",\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  })\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"&:nth-of-type(odd)\": {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  })\n)(TableRow);\n\nexport default function EmployeeTable() {\n  const [employeeData, setEmployeeData] = useState<any[]>([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [loading, setLoading] = useState(true);\n  const [openFormDialog, setOpenFormDialog] = useState(false);\n  const [typeFormDialog, setTypeFormDialog] = useState<string>();\n  const [idEmployee, setIdEmployee] = useState<string>();\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\",\n  });\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    subTitle: \"\",\n    onConfirm: () => {},\n  });\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    setPage(newPage);\n  };\n\n  const fetchData = async () => {\n    const employeeData = await apiCaller(\"/\", \"get\", null);\n    setEmployeeData(employeeData?.data.reverse());\n    setLoading(false);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleCloseFormDialog = () => {\n    setOpenFormDialog(false);\n  };\n\n  const handleDeleteEmployee = async (id: any) => {\n    setConfirmDialog({\n      ...confirmDialog,\n      isOpen: false,\n    });\n    setEmployeeData([]);\n    setLoading(true);\n    await apiCaller(`/${id}`, \"delete\", null);\n    await fetchData();\n    setNotify({\n      isOpen: true,\n      message: \"Deleted Successfully\",\n      type: \"error\",\n    });\n  };\n\n  const handleAddItem = async (data: any) => {\n    setEmployeeData([]);\n    setLoading(true);\n    await apiCaller(\"/\", \"post\", data);\n    await fetchData();\n    setNotify({\n      isOpen: true,\n      message: \"Added Successfully\",\n      type: \"success\",\n    });\n  };\n\n  const handleEditItem = async (data: any, id: string) => {\n    setEmployeeData([]);\n    setLoading(true);\n    await apiCaller(`/${id}`, \"put\", data);\n    await fetchData();\n    setNotify({\n      isOpen: true,\n      message: \"Edited Successfully\",\n      type: \"success\",\n    });\n  };\n\n  const handleShowFormDialog = (type: string, id?: string) => {\n    setOpenFormDialog(true);\n    setTypeFormDialog(type);\n    setIdEmployee(id);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <Container>\n      <br />\n      <FormDialog\n        typeAction={typeFormDialog}\n        open={openFormDialog}\n        handleClose={handleCloseFormDialog}\n        handleAddItem={(data: any) => handleAddItem(data)}\n        handleEditItem={(data: any, id: string) => handleEditItem(data, id)}\n        id={idEmployee}\n      />\n      <Typography variant=\"h3\" align=\"center\" style={{ color: \"#4d7cc1\" }}>\n        Employee List\n      </Typography>\n      <br />\n      <TableContainer component={Paper}>\n        <Table stickyHeader={true} size=\"medium\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"center\">First Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Last Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Position</StyledTableCell>\n              <StyledTableCell align=\"center\">Action</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading && <Loading />}\n            {(rowsPerPage > 0\n              ? employeeData.slice(\n                  page * rowsPerPage,\n                  page * rowsPerPage + rowsPerPage\n                )\n              : employeeData\n            ).map((employee) => (\n              <StyledTableRow key={employee.id}>\n                <StyledTableCell align=\"center\">\n                  {employee.firstname}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  {employee.lastname}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  {employee.email}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  {employee.position}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <ButtonGroup>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      onClick={() => handleShowFormDialog(\"edit\", employee.id)}\n                      // style={{ paddingRight: 0 }}\n                    >\n                      {/* Edit */}\n                      <EditOutlined />\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      // style={{ paddingLeft: 0 }}\n                      onClick={() =>\n                        setConfirmDialog({\n                          isOpen: true,\n                          title: \"Are you sure to delete this employee?\",\n                          subTitle: \"You can't undo this action\",\n                          onConfirm: () => {\n                            handleDeleteEmployee(employee.id);\n                          },\n                        })\n                      }\n                    >\n                      <DeleteForeverOutlined />\n                      {/* Delete */}\n                    </Button>\n                  </ButtonGroup>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Button\n        variant=\"contained\"\n        style={{ background: \"#4f9ed5\", color: \"white\" }}\n        onClick={() => handleShowFormDialog(\"add\")}\n      >\n        New Employee\n      </Button>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={employeeData.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n      <Notification notify={notify} setNotify={setNotify} />\n      <ConfirmDialog\n        confirmDialog={confirmDialog}\n        setConfirmDialog={setConfirmDialog}\n      />\n    </Container>\n  );\n}\n","import { AppBar, Toolbar } from \"@material-ui/core\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport Counter from \"./Counter\";\nimport EmployeeTable from \"./EmployeeTable\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === 0 ? <Counter /> : <EmployeeTable />}\n    </div>\n  );\n}\n\nexport default function MainPage() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div>\n      <AppBar position=\"static\" style={{ background: \"#1976d2\" }}>\n        <Toolbar>\n          <Typography variant=\"h6\" align=\"center\" style={{ flexGrow: 2 }}>\n            Hello Health Group\n          </Typography>\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            aria-label=\"Vertical tabs example\"\n            style={{ flexGrow: 3 }}\n          >\n            <Tab label=\"Counter\" />\n            <Tab label=\"Employees Table\" />\n          </Tabs>\n        </Toolbar>\n      </AppBar>\n      <TabPanel value={value} index={0} />\n      <TabPanel value={value} index={1} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport MainPage from \"./components/MainPage\";\n\nconst App = () => {\n  return <MainPage/>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}